{"pathname":"/post/teznote-blog-builder-development-02","cat":"/dev","title":"Tez'Note 블로그 빌더 개발노트 02 - 폴더, 파일들 초기 셋업","description":"본격 코딩 전 각종 모듈 import 및 주요 config 파일들 셋업","updated":"2023-11-30","content":"<article><h1 id=\"page-title\">Tez'Note 블로그 빌더 개발노트 02 - 폴더, 파일들 초기 셋업</h1><div><div id=\"page-description\">본격 코딩 전 각종 모듈 import 및 주요 config 파일들 셋업</div><div id=\"page-updated\">Last updated: 2023-11-30</div></div><div id=\"page-main\"><h2>Github 레포지토리 클론</h2><p>기존 <a href=\"https://jekyllrb-ko.github.io/\">Jekyll</a> SSG 로 운용하던 블로그 레포지토리에서 작업하기로 했다.</p><p>먼저 Ubuntu 22.04 (Windows 11 WSL), <a href=\"https://nodejs.org/en\">Node.JS</a> 18 버전 환경에서, 작업하기 적당한 폴더로 이동한 뒤, 터미널에 아래와 같이 입력한다.</p><pre><code class=\"language-bash\"><div class=\"codeline\">git <span class=\"hljs-built_in\">clone</span> https://github.com/teznote/teznote.github.io</div><div class=\"codeline\"><span class=\"hljs-built_in\">cd</span> teznote.github.io</div><div class=\"codeline\"><span class=\"hljs-built_in\">rm</span> -rf *</div></code></pre><p>원격 레포지토리에 있는 내용을 로컬로 받아와서 그 안에 있는 내용을 몽땅 지워버린다. (물론 .git 폴더는 지우지 말아야 한다.)</p><p>깨끗이 비운 뒤 다시 Push 했다.</p><h2>프로젝트 폴더 생성</h2><p>프로텍트 루트 폴더 밑에 아래와 같은 명령어로 폴더들을 생성한다.</p><pre><code class=\"language-bash\"><div class=\"codeline\"><span class=\"hljs-built_in\">mkdir</span> _assets</div><div class=\"codeline\"><span class=\"hljs-built_in\">mkdir</span> _layouts</div><div class=\"codeline\"><span class=\"hljs-built_in\">mkdir</span> _pages</div></code></pre><h2>각종 모듈 설치</h2><p>프로젝트 루트 폴더에서 npm 으로 초기화 및 모듈을 설치한다.</p><pre><code class=\"language-bash\"><div class=\"codeline\">npm init -y</div><div class=\"codeline\">npm i -D fast-glob fs-extra markdown-it highlight.js html-minifier gray-matter liquidjs postcss postcss-nested unocss cssnano</div></code></pre><p><code>package.json</code> 파일을 열어보면, 설치된 모듈들도 보이고 뭔가가 적당히 설정되어 있다.</p><p>추가로 아래 내용을 Json 형식에 맞게 적당한 위치에 삽입했다. 현재의 표준인 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules\">ES 모듈</a>을 디폴트로 사용하기 위해서다.</p><pre><code class=\"language-json\"><div class=\"codeline\"><span class=\"hljs-comment\">// ./package.json</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;module&quot;</span></div></code></pre><h2>build.js 초기화</h2><p>이제 <code>build.js</code> 파일을 프로젝트 루트 폴더에 생성한다. 빌더 프로젝트의 가장 핵심이 되는 파일로, 빌드를 위한 모든 코드들을 이 파일안에 몽땅 때려박을 예정이다.</p><p>우선 이 파일 안에 아래 내용을 코딩한다. 설치한 모듈을 import 하기 위한 구문이다.</p><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-comment\">// ./build.js</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> fg <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fast-glob&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs-extra&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> matter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;gray-matter&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> yaml <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;js-yaml&#x27;</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> postcss <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;postcss&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> postcss_nested <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;postcss-nested&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> unocss <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@unocss/postcss&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> cssnano <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;cssnano&#x27;</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Liquid</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;liquidjs&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> { minify } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;html-minifier&#x27;</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highlight.js&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> markdownIt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it&#x27;</span></div></code></pre><p>대략적으로 모듈을 살펴보면...</p><p><a href=\"https://github.com/mrmlnc/fast-glob#readme\">fast-glob</a> 은 glob 패턴을 사용하여, 로컬에 저장된 파일들을 경로를 배열 형식으로 리턴하는 모듈이다. 마크다운 포스팅들을 읽어들이는 용도로 쓸 예정이다.</p><p><a href=\"https://github.com/jprichardson/node-fs-extra\">fs-extra</a> 는 <a href=\"https://nodejs.org/en\">Node.JS</a> 의 빌트인 모듈인 fs 를 보다 편리하게 개선한 모듈이라 보면 된다.</p><p><a href=\"https://github.com/jonschlinkert/gray-matter\">gray-matter</a> 는 마크다운이나, 템플릿 html 의 상단에 포함되어있는 프론트매터와 그 아래의 콘텐츠를 각각 읽어서 각각을 오브젝트 형식으로 리턴하는 모듈이다.</p><p><a href=\"github.com/nodeca/js-yaml#readme\">js-yaml</a> 은 비록 npm 으로 설치하지는 않았으나 gray-matter 설치를 하면 같이 사용할 수 있는 모듈로 Yaml 형식의 데이터를 파싱하여 오브젝트 형식으로 리턴하는 모듈이다.</p><p><a href=\"https://postcss.org/\">postcss</a> 는 CSS 후처리기(?) 로 이해되는데, 여기에 각종 플러그인들을 연결하여 편리하게 CSS 를 빌드할 수 있다.</p><p><a href=\"https://github.com/postcss/postcss-nested#readme\">postcss_nested</a> 는 <a href=\"https://sass-lang.com/\">SASS</a> 의 Nested 문법과 같은 구조를 웹브라우저가 읽을 수 있는 형태로 파싱해준다.</p><p><a href=\"https://unocss.dev/\">UnoCSS</a> 는 Utility-First CSS 를 사용하기 위한 도구로, 웹페이지에 아이콘도 편리하게 삽입하는 기능도 제공한다.</p><p><a href=\"https://github.com/cssnano/cssnano\">cssnano</a> 는 CSS 구문을 압축해주는 툴이다.</p><p><a href=\"https://liquidjs.com/\">liquidjs</a> 는 <a href=\"http://jekyllrb-ko.github.io/\">Jekyll</a> SSG 에서 사용되는 템플릿 엔진으로 익숙하기 때문에 사용하였다. 마크다운 파싱 후, 파싱된 html 코드 앞뒤로 html 덧붙이기 위해 사용하였다.</p><p><a href=\"https://github.com/kangax/html-minifier\">html-minifier</a> 는 이름에서 알 수 있듯 빌드된 html 을 마지막으로 압축하기 위해 사용하는 모듈이다.</p><p><a href=\"https://highlightjs.org/\">highlight.js</a> 는 코드 Syntax 하이라이트를 해주는 도구로, Jekyll 로 블로그를 운영할 때부터 사용했다. Jekyll 의 기본 하이라이트인 <a href=\"https://github.com/rouge-ruby/rouge\">Rouge</a> 보다도 지원하는 언어가 더 많아서였다. (Highlight.js 는 엑셀과 VBA 도 하이라이팅을 지원한다.)</p><p><a href=\"https://github.com/markdown-it/markdown-it#readme\">markdown-it</a> 은 마크다운 형식의 파일이나 텍스트를 html 변환해주는 도구다.</p><h2>UnoCSS 초기화</h2><p><code>_assets</code> 폴더 안에 <code>main.css</code> 파일을 생성하고, 아래 내용만 우선 채운다.</p><pre><code class=\"language-css\"><div class=\"codeline\"><span class=\"hljs-comment\">/* ./_assets/main.css */</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">@unocss</span> all;</div></code></pre><p>프로젝트 루트 폴더에 <code>uno.config.ts</code> 파일을 생성하고, 구글링 통해서 각종 초기화 방법을 찾아서 세팅했다.</p><pre><code class=\"language-typescript\"><div class=\"codeline\"><span class=\"hljs-comment\">// ./uno.config.ts</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> {</div><div class=\"codeline\">  defineConfig,</div><div class=\"codeline\">  presetAttributify,</div><div class=\"codeline\">  presetIcons,</div><div class=\"codeline\">  presetTypography,</div><div class=\"codeline\">  presetUno,</div><div class=\"codeline\">  presetWebFonts,</div><div class=\"codeline\">  transformerDirectives,</div><div class=\"codeline\">  transformerVariantGroup</div><div class=\"codeline\">} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;unocss&#x27;</span></div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs-extra&#x27;</span></div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({</div><div class=\"codeline\">  <span class=\"hljs-attr\">preflights</span>: [</div><div class=\"codeline\">    {</div><div class=\"codeline\">      <span class=\"hljs-attr\">getCSS</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ theme }</span>) =&gt;</span> fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&#x27;./node_modules/@unocss/reset/eric-meyer.css&#x27;</span>, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>),</div><div class=\"codeline\">    },</div><div class=\"codeline\">  ],</div><div class=\"codeline\">  <span class=\"hljs-attr\">content</span>: {</div><div class=\"codeline\">    <span class=\"hljs-attr\">filesystem</span>: [</div><div class=\"codeline\">      <span class=\"hljs-string\">&#x27;./_layouts/**/*.html&#x27;</span>,</div><div class=\"codeline\">    ]</div><div class=\"codeline\">  },</div><div class=\"codeline\">  <span class=\"hljs-attr\">theme</span>: {</div><div class=\"codeline\">    <span class=\"hljs-attr\">fontFamily</span>: {</div><div class=\"codeline\">      <span class=\"hljs-attr\">sans</span>: <span class=\"hljs-string\">&#x27;NanumSquareRound, sans-serif&#x27;</span>,</div><div class=\"codeline\">      <span class=\"hljs-attr\">mono</span>: <span class=\"hljs-string\">&#x27;Hack, NanumSquareRound, monospace&#x27;</span>,</div><div class=\"codeline\">    },</div><div class=\"codeline\">  },</div><div class=\"codeline\">  <span class=\"hljs-attr\">presets</span>: [</div><div class=\"codeline\">    <span class=\"hljs-title function_\">presetUno</span>(),</div><div class=\"codeline\">    <span class=\"hljs-title function_\">presetAttributify</span>(),</div><div class=\"codeline\">    <span class=\"hljs-title function_\">presetIcons</span>({</div><div class=\"codeline\">      <span class=\"hljs-attr\">extraProperties</span>: {</div><div class=\"codeline\">        <span class=\"hljs-string\">&#x27;display&#x27;</span>: <span class=\"hljs-string\">&#x27;inline-block&#x27;</span>,</div><div class=\"codeline\">        <span class=\"hljs-string\">&#x27;vertical-align&#x27;</span>: <span class=\"hljs-string\">&#x27;middle&#x27;</span>,</div><div class=\"codeline\">      },</div><div class=\"codeline\">      <span class=\"hljs-attr\">cdn</span>: <span class=\"hljs-string\">&#x27;https://esm.sh/&#x27;</span></div><div class=\"codeline\">    }),</div><div class=\"codeline\">    <span class=\"hljs-title function_\">presetTypography</span>(),</div><div class=\"codeline\">  ],</div><div class=\"codeline\">  <span class=\"hljs-attr\">transformers</span>: [</div><div class=\"codeline\">    <span class=\"hljs-title function_\">transformerDirectives</span>(),</div><div class=\"codeline\">    <span class=\"hljs-title function_\">transformerVariantGroup</span>(),</div><div class=\"codeline\">  ],</div><div class=\"codeline\">})</div></code></pre><p>대략적인 내용을 살펴보자면, <code>eric-meyer.css</code> 내용을 그대로 가져오고, <code>_layouts</code> 폴더에 있는 html 파일의 Utility-First CSS 를 파싱하고, <code>font-sans</code> 와 <code>font-mono</code> 는 주어진대로 변환하고, 아이콘을 삽입할 때 적용할 스타일과 어디서 소스를 가져올지를 지정해뒀다.</p></div></article>"}
