{"pathname":"/post/teznote-blog-builder-development-04","cat":"/dev","title":"Tez'Note 블로그 빌더 개발노트 04 - 웹페이지 레이아웃 설정과 SPA, dark 테마 스크립트","description":"웹페이지로 구현될 레이아웃 템플릿 작성 및 SPA, dark 테마 사용 위한 스크립트 구문 설정","updated":"2023-12-02","content":"<article><h1 id=\"page-title\">Tez'Note 블로그 빌더 개발노트 04 - 웹페이지 레이아웃 설정과 SPA, dark 테마 스크립트</h1><div><div id=\"page-description\">웹페이지로 구현될 레이아웃 템플릿 작성 및 SPA, dark 테마 사용 위한 스크립트 구문 설정</div><div id=\"page-updated\">Last updated: 2023-12-02</div></div><div id=\"page-main\"><h2>레이아웃 템플릿</h2><p><code>_layouts</code> 폴더에 <code>base.html</code>, <code>nav.html</code>, <code>page.html</code> 3 개의 파일을 생성한다.</p><p><code>base.html</code> 은 전체 웹페이지를 구성하는 레이아웃이고, <code>nav.html</code> 는 네비게이션 페이지를, <code>page.html</code> 은 마크다운으로 구현된 포스팅 각각을 감싸는 페이지를 만들어내기 위한 레이아웃이다.</p><p>가장 중요한 파일인 <code>base.html</code> 은 빌드 후에는 index.html 가 되며, 이 웹페이지 안에서 SPA 방식에 따라 모든 포스팅과 네비게이션이 나타나게 된다. 그리고 다크 테마로 전환되는 스위치도 삽입했다.</p><h2>SPA (Single Page Application) 설정</h2><p>해시 (#) 가 아닌 History 방식으로 작동하는 SPA 를 만들어보기로 했다. 이를 위한 스크립트를 아래와 같이 작성하여 <code>base.html</code> 안에 삽입했다.</p><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-title function_\">fill_content</span>()</div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fill_content</span>(<span class=\"hljs-params\"></span>) {</div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> cur_pathname = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-string\">&#x27;&#x27;</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">try</span> {</div><div class=\"codeline\">    res = <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(cur_pathname + (cur_pathname === <span class=\"hljs-string\">&#x27;/&#x27;</span> ? <span class=\"hljs-string\">&#x27;index.json&#x27;</span> : <span class=\"hljs-string\">&#x27;.json&#x27;</span>))).<span class=\"hljs-title function_\">json</span>()</div><div class=\"codeline\">  } <span class=\"hljs-keyword\">catch</span> (err) {</div><div class=\"codeline\">    res = <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;/404.json&#x27;</span>)).<span class=\"hljs-title function_\">json</span>()</div><div class=\"codeline\">  }</div><div class=\"codeline\">  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;main&#x27;</span>).<span class=\"hljs-property\">innerHTML</span> = res.<span class=\"hljs-property\">content</span></div><div class=\"codeline\">}</div><div class=\"codeline\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">async</span> e =&gt; {</div><div class=\"codeline\">  <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">matches</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>) &amp;&amp; e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">origin</span>) &amp;&amp; !e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;href&#x27;</span>).<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/[.#]/</span>)) {</div><div class=\"codeline\">    e.<span class=\"hljs-title function_\">preventDefault</span>()</div><div class=\"codeline\">    <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span> !== <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">href</span>) {</div><div class=\"codeline\">      history.<span class=\"hljs-title function_\">pushState</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span>)</div><div class=\"codeline\">      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fill_content</span>()</div><div class=\"codeline\">      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;body &gt;div&#x27;</span>).<span class=\"hljs-title function_\">scrollTo</span>({ <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span> })</div><div class=\"codeline\">    }</div><div class=\"codeline\">  }</div><div class=\"codeline\">}</div><div class=\"codeline\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onpopstate</span> = <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {</div><div class=\"codeline\">  <span class=\"hljs-title function_\">fill_content</span>()</div><div class=\"codeline\">}</div></code></pre><p>대략 아래와 같은 기능이 구현되어야 한다.</p><blockquote><ul><li><code>&lt;a&gt;</code> 태그를 클릭했을 때, 링크 주소로 웹페이지를 연결하는 것이 아니라, 링크 주소와 관련된 json 파일 로드하여 화면에 띄움</li><li>주소를 직접 입력했을 때, 링크 주소와 관련된 json 파일 로드하여 화면에 띄움</li><li>웹페이지 앞, 뒤가기 버튼을 클릭했을 때, 주소가 바뀌면서 해당 주소와 관련된 json 파일을 로드하여 화면에 띄움</li></ul></blockquote><p>공통적으로 나오는 것이, json 파일 로드 후 화면에 띄우는 작업이다. 이를 <code>fill_content</code> 함수로 구현하였다. 현재 표시된 인터넷 주소를 <code>window.location.pathname</code> 으로 읽어서, 주소와 동일한 로컬 파일 경로에 있는 json 파일을 로드한다. 만약 파일이 없다면 대신 <code>404.json</code> 을 로드한다. 그리고 이를 <code>&lt;main&gt;</code> 태그 하위에 붙이는 식으로 작동한다.</p><p><code>&lt;a&gt;</code> 태그를 클릭했을 때 제어는 <code>document.body.onclick</code> 함수에 연결된 함수에서 담당한다.처음에는 <code>&lt;a&gt;</code> 태그 클릭 이벤트 처리로 하려했는데 잘 되지 않았다. 구글링해보니 <code>&lt;a&gt;</code> 태그 상위에 있는 태그의 이벤트로 처리해야 한다고 한다. 이유는 잘 모르겠다.</p><p>어느 경우일 때 본래의 <code>&lt;a&gt;</code> 동작이 아닌 SPA 작동이 되도록 할지를 우선 판단해야 한다. 이벤트 타겟 <code>e.target</code> 이 <code>&lt;a&gt;</code> 태그이면서, 링크 주소가 블로그주소로 시작하고, 주소에 <code>.</code> 이나 <code>#</code> 이 없는 경우 (파일 다운로드, 해시 링크가 아닐 것) 가 그것이다.</p><p>이 경우에만 <code>e.preventDefault()</code> 구문으로 본래의 동작을 막아버리고, 클릭한 주소가 현재의 주소가 같지 않은 경우 (즉, 새로운 json 로딩이 필요한 경우) 에만 <code>history.pushState</code> 함수를 통해 화면에 보이는 주소를 바꾸고, <code>fill_content</code> 함수를 호출한다.</p><p>주소를 직접 입력했을 때는 사실 스크립트로 제어가 안된다. 이는 클라이언트가 아닌 서버가 처리하는 영역이기 때문이다. Github Page 는 정적사이트만 배포할 수 있기 때문에 입력된 주소와 일치하는 경로에 있는 웹페이지를 띄우려하지만, Tez'Note 블로그는 <code>index.html</code> 밖에 없으므로 404 에러를 뱉을 수밖에 없다.</p><p>그런데, Github Page 는 404 에러의 경우 <code>404.html</code> 파일이 있다면 이를 대신 띄우게 된다. 이 점에 착안하여 <code>index.html</code> 과 정확하게 동일한 <code>404.html</code> 을 둔다면, <code>404.html</code> 이 로딩될 것이고, 위 스크립트 제일 상단에 있는 <code>fill_content</code> 함수가 호출되어 입력한 주소에 맞는 json 파일이 로딩된다.</p><p>뒤이은 포스팅에서 <code>build.js</code> 내용을 추가작성하는데, <code>index.html</code> 을 생성하고 이를 그대로 <code>404.html</code> 로 복사하는 구문이 들어갈 것이다.</p><p>웹페이지 앞, 뒤가기 버튼 클릭의 경우 <code>popstate</code> 이벤트가 발생하고, 그동안 축적된 세션 (<code>history.pushState</code> 함수로 호출한 주소도 포함된다.) 에 따라 주소가 변경된다. <code>window.onpopstate</code> 에 <code>popstate</code> 이벤트 발생 시 처리할 구문을 연결하면 되는데 <code>fill_content</code> 함수만 호출해주면 된다.</p><h2>다크테마 전환 스크립트</h2><p><code>base.html</code> 안에 별도의 스크립트로 아래 내용을 삽입했다.</p><pre><code class=\"language-js\"><div class=\"codeline\">$root = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;html&#x27;</span>)</div><div class=\"codeline\">$switch_theme_input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#switch-theme input&#x27;</span>)</div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">let</span> cur_theme = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">sessionStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>) || (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">matchMedia</span> &amp;&amp; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class=\"hljs-property\">matches</span>  ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>)</div><div class=\"codeline\"><span class=\"hljs-keyword\">if</span> (cur_theme === <span class=\"hljs-string\">&#x27;dark&#x27;</span>) {</div><div class=\"codeline\">  $switch_theme_input.<span class=\"hljs-property\">checked</span> = <span class=\"hljs-literal\">true</span></div><div class=\"codeline\">  <span class=\"hljs-title function_\">set_theme</span>(<span class=\"hljs-string\">&#x27;dark&#x27;</span>)</div><div class=\"codeline\">}</div><div class=\"codeline\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">set_theme</span>(<span class=\"hljs-params\">theme</span>) {</div><div class=\"codeline\">  <span class=\"hljs-keyword\">if</span> (theme === <span class=\"hljs-string\">&#x27;dark&#x27;</span>) {</div><div class=\"codeline\">    $root.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">&#x27;dark&#x27;</span>)</div><div class=\"codeline\">    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">sessionStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>, <span class=\"hljs-string\">&#x27;dark&#x27;</span>)</div><div class=\"codeline\">  } <span class=\"hljs-keyword\">else</span> {</div><div class=\"codeline\">    $root.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">&#x27;dark&#x27;</span>)</div><div class=\"codeline\">    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">sessionStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>, <span class=\"hljs-string\">&#x27;light&#x27;</span>)</div><div class=\"codeline\">  }</div><div class=\"codeline\">}</div><div class=\"codeline\">$switch_theme_input.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {</div><div class=\"codeline\">  <span class=\"hljs-title function_\">set_theme</span>((e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">checked</span>) ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>)</div><div class=\"codeline\">})</div></code></pre><p>id 가 <code>switch-theme</code> 인 태그 아래에 있는 <code>&lt;input&gt;</code> 을 클릭할 때마다 테마가 전환되도록 하는 것이 기본이다. 전환이 되면 스타일이 모두 바껴야한다. css 파일에 다크 테마 용도의 스타일을 미리 설정해두고, 테마가 전환되면 해당 스타일을 사용토록 하는 방식으로 하기로 했다.</p><p>위 스크립트를 보면 <code>$switch_theme_input</code> 변수에 <code>&lt;input&gt;</code> 태그를 연결하고, 클릭 이벤트 발생할 때마다 테마를 전환하는 <code>set_theme</code> 함수를 호출하도록 했다. <code>set_theme</code> 함수를 보면 다크 테마로 변경될 경우, <code>&lt;html&gt;</code> 최상위 태그를 가리키는 <code>$root</code> 함수를 통해 <code>dark</code> class 를 붙이도록 했다. 즉, <code>dark</code> 라고 명명될 경우 다크 테마 css 를 적용토록 하면 된다.</p><p><code>_assets</code> 폴더 안의 <code>main.css</code> 파일을 열어서 아래 내용과 유사하게 작성한다.</p><pre><code class=\"language-css\"><div class=\"codeline\"><span class=\"hljs-selector-pseudo\">:root</span> {</div><div class=\"codeline\">  <span class=\"hljs-attr\">--foreground-color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>); <span class=\"hljs-attr\">--background-color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>);</div><div class=\"codeline\">  &amp;<span class=\"hljs-selector-class\">.dark</span> {</div><div class=\"codeline\">    <span class=\"hljs-attr\">--foreground-color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>); <span class=\"hljs-attr\">--background-color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);</div><div class=\"codeline\">  }</div><div class=\"codeline\">}</div></code></pre><p>css 변수를 사용했다. 동일한 변수들이 <code>dark</code> 클래스가 있고 없고에 따라 값이 다르다. 뒤 이은 태그들의 컬러 속성 등을 변수로 연결해두면 (예를들어 <code>body { color: var(--foreground-color); background: var(--background-color); }</code>) 간단하게 테마 설정도 되고 나중에 수정도 간편할 것이다.</p><p>그리고 nested css 형식인데 정식 css 형식은 아니다. 나중에 <a href=\"https://postcss.org/\">PostCSS</a> 후처리기로 웹브라우저가 읽을 수 있는 css 형식으로 바뀌어 빌드된다.</p><p>중요한점은 <code>window.sessionStorage</code> 를 사용하는 점이다. 이를 사용하는 이유는 사용자의 테마 선택을 미리 저장하기 위함이며, 웹페이지가 처음 로드될 때 <code>cur_theme</code> 변수에 테마 선택을 우선 로드하고, 없다면 시스템의 테마를 로드하도록 했다.</p></div></article>"}
