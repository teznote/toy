{"pathname":"/post/teznote-blog-builder-development-01","cat":"/dev","title":"Tez'Note 블로그 빌더 개발노트 01 - 콘셉트와 프로젝트 구조","description":"Tez'Note 블로그 콘셉트와 빌더 프로젝트 구조","updated":"2023-11-29","layout":"page","content":"<h2>빌더 콘셉트</h2><p>그동안 블로그에 많이 사용되는 유명한 SSG 툴인 <a href=\"https://jekyllrb-ko.github.io/\">Jekyll</a> 을 사용해왔는데, 개인적인 스터디도 할 겸해서 직접 블로그 빌더를 구축해보기로 하였다.</p><p>어떤 방식으로 빌드가 되도록 할까 하다가 아래와 같이 정했다.</p><blockquote><ul><li>Historical SPA 방식으로 작동 (메뉴 또는 포스팅을 클릭거나 주소를 입력하면 Json 형식의 콘텐츠를 불러오도록 함)</li><li>포스팅은 마크다운으로 작성하되, Github 에 올리면 자동으로 빌드(마크다운 -&gt; Html -&gt; Json 으로 저장) 되도록 함</li><li>마크다운 파일을 <code>[ver]pathname.md</code> 형태로 저장하고, <code>ver</code> 가 변경된 파일만 빌드, <code>ver</code> 에 따라 포스팅 정렬, <code>pathname</code> 은 포스팅 주소가 되도록 함</li></ul></blockquote><p>약 한달간을 삽질한 끝에 적당히(?) 빌더를 만들 수 있었다. <code>build.js</code> 파일에 필요한 기능을 몽땅 때려박고, <code>/docs</code> 폴더에 빌드 결과물 (Html, Json 파일 등) 을 저장되도록 했다.</p><p>이후 포스팅을 새로 작성해서 Github 레포지토리에 푸시하면, Github Actions 가 빌드 및 <code>/docs</code> 폴더 Deploy 를 자동으로 실행하도록 구성하였다.</p><h2>사용 모듈</h2><p>주요한 모듈만 밝히자면, 마크다운 파싱을 위해 <a href=\"https://github.com/markdown-it/markdown-it\">markdown-it</a>, 코드 하이라이트를 위해 <a href=\"https://highlightjs.org/\">highlight.js</a>, html 구축을 위해 템플릿 언어로 <a href=\"https://liquidjs.com/index.html\">LiquidJS</a> 를 사용했다.</p><p>Jekyll 경험 때문인지, LiquidJS 를 사용했으며, 프론트매터 파싱을 위해 <a href=\"https://github.com/jonschlinkert/gray-matter\">gray-matter</a> 도 이용했다. Jekyll 과 유사하게 프론트매터의 <code>layout</code> 속성에 따라 템플릿이 순차 적용되도록 했다.</p><p>이외에도 요새 핫한 Utility-First CSS 도 써보고 싶어서, <a href=\"https://unocss.dev/\">UnoCSS</a> 를 사용했으며, UnoCSS 를 Node.JS 와 접목시키기 위해 <a href=\"https://postcss.org/\">PostCSS</a> 모듈의 도움을 받았다.</p><h2>개발 프로젝트 폴더 구조</h2><pre><code class=\"language-pseudo\"><div class=\"codeline\">Project Root</div><div class=\"codeline\">  │</div><div class=\"codeline\">  ├ _assets</div><div class=\"codeline\">  │   └ main.css</div><div class=\"codeline\">  │</div><div class=\"codeline\">  ├ _layouts</div><div class=\"codeline\">  │   └ base.html</div><div class=\"codeline\">  │     nav.html</div><div class=\"codeline\">  │     page.html</div><div class=\"codeline\">  │</div><div class=\"codeline\">  ├ _pages</div><div class=\"codeline\">  │</div><div class=\"codeline\">  └ build.js</div><div class=\"codeline\">    uno.config.ts</div></code></pre><p><code>_assets</code> 폴더에는 UnoCSS 에 의해 빌드되는 <code>main.css</code> 파일과, 그 외 특별한 수정없이 Deploy 되어야 할 static 파일들 (예를들면 <code>favicon.svg</code>) 이 위치해야 하고,</p><p><code>_layouts</code> 폴더에는 LiquidJS 의 템플릿이 들어가되, <code>base.html</code> 은 SPA 의 껍데기를 구성하는 가장 기본적인 html 파일이며, <code>nav.html</code> 은 네비게이션을 위한 전체 포스팅 구조를, <code>page.html</code> 은 파싱된 마크다운과 결합하여 각 포스팅을 구성하게 되는 템플릿이다. <code>nav.html</code> 과 <code>pages.html</code> 빌드 결과는 위에서 언급한대로 Json 파일이다.</p><p><code>_pages</code> 폴더에는 실제로 블로그를 운영할 때 마크다운 형식의 포스팅들이 저장될 장소다. 폴더에 맞게 올리면 해당 폴더구조가 그대로 주소 (즉, pathname) 가 되도록 했다.</p><p>프로젝트 루트 폴더의 <code>build.js</code> 는 빌드를 위한 코드를, <code>uno.config.ts</code> 는 UnoCSS 의 설정파일이 저장될 파일이다.</p><h2>블로그 웹페이지 구조</h2><p>위에서 언급했듯, SPA 로 구성했다. 즉, 최종 빌드 결과물은 <code>index.html</code> 파일 하나만 존재한다. (나중에 다시 언급하겠지만 실제로는 Github Page 특성 때문에 <code>index.html</code> 과 내용이 동일한 <code>404.html</code> 도 빌드 되어야 한다.)</p><p>구조는 아래와 같이 단순하게 만들었다.</p><pre><code class=\"language-html\"><div class=\"codeline\"><span class=\"hljs-comment\">&lt;!-- ... --&gt;</span></div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span></div><div class=\"codeline\">  헤더, 메뉴 (블로그 등록된 포스팅 나열)</div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">&lt;!-- 메뉴 또는 포스팅 선택에 따라 Json 로딩하여 출력 --&gt;</span></div><div class=\"codeline\">  포스팅, 네비게이션 </div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span></div><div class=\"codeline\">  푸터</div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// Light-Dark 테마 스크립트</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// Historical SPA 작동 스크립트 </span></div><div class=\"codeline\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></div></code></pre><p><code>메뉴</code>를 클릭하면, <code>&lt;main&gt;&lt;/main&gt;</code> 사이에 네이게이션 (<code>nav.html</code> 빌드 결과) 이, 네이게이션 안의 <code>포스팅</code>을 클릭하면 포스팅 (<code>page.html</code> 빌드 결과) 가 로딩되도록 했다.</p><p>그리고 테마 전환과 Historical SPA 작동이 이뤄지기 위한 스크립트를 추가했다.</p>"}
