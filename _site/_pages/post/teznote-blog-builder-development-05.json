{"pathname":"/post/teznote-blog-builder-development-05","cat":"/dev","title":"Tez'Note 블로그 빌더 개발노트 05 - 빌드 스크립트 작성","description":"블로그 빌드의 가장 핵심적인 부분인 markdown -> html -> json 으로 변환하는 과정","updated":"2023-12-04","content":"<article><h1 id=\"page-title\">Tez'Note 블로그 빌더 개발노트 05 - 빌드 스크립트 작성</h1><div><div id=\"page-description\">블로그 빌드의 가장 핵심적인 부분인 markdown -> html -> json 으로 변환하는 과정</div><div id=\"page-updated\">Last updated: 2023-12-04</div></div><div id=\"page-main\"><h2>마크다운 형식</h2><p><a href=\"http://jekyllrb-ko.github.io/\">Jekyll</a> 을 오랫동안 사용했던 관계로, Jekyll 에서 사용하는 마크다운 형태를 유사하게 사용해보고자 했다.</p><p>Jekyll 의 마크다운 파일은 <code>YYYY-MM-DD-파일명.md</code> 와 같은 형태다. 그리고 파일 내부는 프론트매터를 포함하고 있으며, 어떤 레이아웃으로 마크다운 파싱 결과를 감쌀지를 <code>layout</code> 으로 지시하게 되어 있다.</p><p>그리고 레이아웃 템플릿은 <a href=\"https://shopify.github.io/liquid/\">Liquid</a> 을 사용하는데, 이 역시 프론트매터를 포함하고 있고, 상위 템플릿은 프론트매터에서 <code>layout</code> 으로, 하위 콘텐츠의 내용은 <code>{{ content }}</code> 지시자로 받도록 되어 있다.</p><p>Tez'Note 블로그 마크다운파일 형식을 <code>[파일버전]파일명.md</code> 로 하기로 했다. <code>파일버전</code>이 수정되었을 때만 빌드되도록 했으며, <code>파일버전</code>에 따라 정렬이 되도록 했다. Jekyll 은 날짜 형식을 지켜야했지만 파일명이 허용하는 문자는 모두 받아들일 수 있도록 한 셈이다.</p><h2>마크다운 빌드 스크립트</h2><p><code>build.js</code> 파일을 열어서 아래 내용들을 이어서 작성했다.</p><p>먼저 <a href=\"https://liquidjs.com/\">LiquidJS</a> 템플릿 엔진을 초기화 하는 구문을 삽입한다.</p><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-keyword\">const</span> engine = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Liquid</span>()</div></code></pre><p>이제 실제 빌드를 크게 함수를 작성해야하는데, 크게 3 부분으로 나누었다. 마크다운을 빌드하는 <code>build_md</code>, 웹페이지 껍데기를 빌드하는 <code>build_layout</code>, css 를 빌드하고 static 파일들을 처리하기 위한 <code>build_assets</code> 함수가 그것인데, 각각은 <code>_pages</code>, <code>_layouts</code>, <code>_assets</code> 폴더를 빌드한다고 보면 된다.</p><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">build_md</span>(<span class=\"hljs-params\"></span>) {</div><div class=\"codeline\">  <span class=\"hljs-comment\">// 로컬에 있는 마크다운 파일들과</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// 마크다운 파일들의 메타데이터를 담고 있는 pageinfo.json 파일을 로딩하여 pageinfo_old 에 연결 </span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> src_mds = fg.<span class=\"hljs-title function_\">globSync</span>(<span class=\"hljs-string\">&#x27;./_pages/**/*.md&#x27;</span>)</div><div class=\"codeline\">  <span class=\"hljs-keyword\">if</span> (!fs.<span class=\"hljs-title function_\">existsSync</span>(<span class=\"hljs-string\">&#x27;./_pages/pageinfo.json&#x27;</span>)) {</div><div class=\"codeline\">    fs.<span class=\"hljs-title function_\">outputJSONSync</span>(<span class=\"hljs-string\">&#x27;./_pages/pageinfo.json&#x27;</span>, [])</div><div class=\"codeline\">  }</div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> pageinfo_old = fs.<span class=\"hljs-title function_\">readJSONSync</span>(<span class=\"hljs-string\">&#x27;./_pages/pageinfo.json&#x27;</span>)</div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> pageinfo_new = []</div><div class=\"codeline\"> </div><div class=\"codeline\">  <span class=\"hljs-comment\">// 마크다운 파일을 모두 순회</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// 파일버전 (ver) 있는 마크다운 중에서,</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// 기존 pageinfo_old 에 없거나 (신규 생성된 마크다운),</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// 기존 pageinfo_old 에 있음에도 파일버전이 달라진 마크다운 (업데이트된 마크다운) 만 json 변환</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// 모든 마크다운 (변환되지 않은 마크다운 포함) 의 메터데이터를 pageinfo_new 에 저장</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> src_md <span class=\"hljs-keyword\">of</span> src_mds) {</div><div class=\"codeline\">    <span class=\"hljs-keyword\">const</span> ver = (src_md.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/\\[.*?\\]/g</span>) || [<span class=\"hljs-string\">&#x27;&#x27;</span>])[<span class=\"hljs-number\">0</span>]</div><div class=\"codeline\">    <span class=\"hljs-keyword\">const</span> pathname = src_md.<span class=\"hljs-title function_\">replace</span>(ver, <span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\.md$/</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;./_pages/&#x27;</span>, <span class=\"hljs-string\">&#x27;/&#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^\\/index$/</span>, <span class=\"hljs-string\">&#x27;/&#x27;</span>)</div><div class=\"codeline\">    <span class=\"hljs-keyword\">const</span> exist_md = pageinfo_old.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x.<span class=\"hljs-property\">pathname</span> === pathname)</div><div class=\"codeline\">    <span class=\"hljs-keyword\">if</span> (ver &amp;&amp; (!exist_md || exist_md.<span class=\"hljs-property\">ver</span> !== ver)) {</div><div class=\"codeline\">&gt;      <span class=\"hljs-keyword\">let</span> { content, page } = (<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\">file, content, page</span>) {</div><div class=\"codeline\">&gt;        <span class=\"hljs-keyword\">let</span> r = matter.<span class=\"hljs-title function_\">read</span>(file, {</div><div class=\"codeline\">&gt;          <span class=\"hljs-attr\">engines</span>: {<span class=\"hljs-attr\">yaml</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> yaml.<span class=\"hljs-title function_\">safeLoad</span>(s, { <span class=\"hljs-attr\">schema</span>: yaml.<span class=\"hljs-property\">JSON_SCHEMA</span> })}</div><div class=\"codeline\">&gt;        })</div><div class=\"codeline\">&gt;        <span class=\"hljs-keyword\">if</span> (file.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/\\.md$/</span>)) {</div><div class=\"codeline\">&gt;          content = md.<span class=\"hljs-title function_\">render</span>(r.<span class=\"hljs-property\">content</span>)</div><div class=\"codeline\">&gt;          <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(page, r.<span class=\"hljs-property\">data</span>)</div><div class=\"codeline\">&gt;          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-string\">&#x27;layout&#x27;</span> <span class=\"hljs-keyword\">in</span> r.<span class=\"hljs-property\">data</span>) ? <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-string\">`./_layouts/<span class=\"hljs-subst\">${r.data.layout}</span>.html`</span>, content, page) : { content, page }</div><div class=\"codeline\">&gt;        } <span class=\"hljs-keyword\">else</span> {</div><div class=\"codeline\">&gt;          content = engine.<span class=\"hljs-title function_\">parseAndRenderSync</span>(r.<span class=\"hljs-property\">content</span>, { content, page, ...r.<span class=\"hljs-property\">data</span> })</div><div class=\"codeline\">&gt;          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-string\">&#x27;layout&#x27;</span> <span class=\"hljs-keyword\">in</span> r.<span class=\"hljs-property\">data</span>) ? <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-string\">`./_layouts/<span class=\"hljs-subst\">${r.data.layout}</span>.html`</span>, content, page) : { content, page }</div><div class=\"codeline\">&gt;        }</div><div class=\"codeline\">&gt;      })(src_md, <span class=\"hljs-string\">&#x27;&#x27;</span>, { pathname })</div><div class=\"codeline\"> </div><div class=\"codeline\">      content = <span class=\"hljs-title function_\">minify</span>(content, { <span class=\"hljs-attr\">collapseWhitespace</span>: <span class=\"hljs-literal\">true</span> })</div><div class=\"codeline\">      <span class=\"hljs-keyword\">const</span> tar_json = <span class=\"hljs-string\">&#x27;./docs&#x27;</span> + (pathname === <span class=\"hljs-string\">&#x27;/&#x27;</span> ? <span class=\"hljs-string\">&#x27;/index&#x27;</span> : pathname) + <span class=\"hljs-string\">&#x27;.json&#x27;</span></div><div class=\"codeline\">      fs.<span class=\"hljs-title function_\">outputJSONSync</span>(tar_json, { pathname, ver, content })</div><div class=\"codeline\">      pageinfo_new.<span class=\"hljs-title function_\">push</span>({ pathname, ver, ...page, tar_json, src_md })</div><div class=\"codeline\">    } <span class=\"hljs-keyword\">else</span> {</div><div class=\"codeline\">      pageinfo_new.<span class=\"hljs-title function_\">push</span>(exist_md)</div><div class=\"codeline\">    }</div><div class=\"codeline\">  }</div><div class=\"codeline\"> </div><div class=\"codeline\">  <span class=\"hljs-comment\">// 전체 포스팅을 나열하는 네비게이션 페이지 json 파일 생성</span></div><div class=\"codeline\">  (<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">gen_nav</span>(<span class=\"hljs-params\">pages</span>) {</div><div class=\"codeline\">    <span class=\"hljs-keyword\">const</span> pathname = <span class=\"hljs-string\">&#x27;/posts&#x27;</span></div><div class=\"codeline\">    <span class=\"hljs-keyword\">let</span> r = matter.<span class=\"hljs-title function_\">read</span>(<span class=\"hljs-string\">&#x27;./_layouts/nav.html&#x27;</span>, {</div><div class=\"codeline\">      <span class=\"hljs-attr\">engines</span>: {<span class=\"hljs-attr\">yaml</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> yaml.<span class=\"hljs-title function_\">safeLoad</span>(s, { <span class=\"hljs-attr\">schema</span>: yaml.<span class=\"hljs-property\">JSON_SCHEMA</span> })}</div><div class=\"codeline\">    })</div><div class=\"codeline\">    <span class=\"hljs-keyword\">let</span> content = engine.<span class=\"hljs-title function_\">parseAndRenderSync</span>(r.<span class=\"hljs-property\">content</span>, { pages, ...r.<span class=\"hljs-property\">data</span> })</div><div class=\"codeline\">    content = <span class=\"hljs-title function_\">minify</span>(content, { <span class=\"hljs-attr\">collapseWhitespace</span>: <span class=\"hljs-literal\">true</span> })</div><div class=\"codeline\">    fs.<span class=\"hljs-title function_\">outputJSONSync</span>(<span class=\"hljs-string\">&#x27;./docs/posts.json&#x27;</span>, { pathname, content })</div><div class=\"codeline\">  })(pageinfo_new)</div><div class=\"codeline\"> </div><div class=\"codeline\">  <span class=\"hljs-comment\">// pageinfo_old 에는 있었지만 pageinfo_new 에는 없는 마크다운의 경우 (삭제된 마크다운)</span></div><div class=\"codeline\">  <span class=\"hljs-comment\">// json 파일 삭제, 만일 이로인해 빈 폴더가 된 경우 해당 폴더도 삭제</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> { pathname, tar_json } <span class=\"hljs-keyword\">of</span> pageinfo_old) {</div><div class=\"codeline\">    <span class=\"hljs-keyword\">const</span> exist_md = pageinfo_new.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x.<span class=\"hljs-property\">pathname</span> === pathname)</div><div class=\"codeline\">    <span class=\"hljs-keyword\">if</span> (!exist_md) {</div><div class=\"codeline\">      fs.<span class=\"hljs-title function_\">removeSync</span>(tar_json)</div><div class=\"codeline\">      <span class=\"hljs-keyword\">const</span> old_dir = tar_json.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/^.*(?=\\/)/g</span>)[<span class=\"hljs-number\">0</span>]</div><div class=\"codeline\">      <span class=\"hljs-keyword\">if</span> (!fs.<span class=\"hljs-title function_\">readdirSync</span>(old_dir).<span class=\"hljs-property\">length</span>) {</div><div class=\"codeline\">        fs.<span class=\"hljs-title function_\">removeSync</span>(old_dir)</div><div class=\"codeline\">      }</div><div class=\"codeline\">    }</div><div class=\"codeline\">  }</div><div class=\"codeline\"> </div><div class=\"codeline\">  <span class=\"hljs-comment\">// pageinfo_new 에 담긴 메타데이터를 새로운 pageinfo.json 파일로 기록</span></div><div class=\"codeline\">  fs.<span class=\"hljs-title function_\">outputJSONSync</span>(<span class=\"hljs-string\">&#x27;./_pages/pageinfo.json&#x27;</span>, pageinfo_new)</div><div class=\"codeline\">}</div></code></pre><p>코드가 길지만 주요한 부분은 주석으로 하여 무엇을 하는지 설명했으니 참고해보면 된다.</p><p>위에서 라인강조가 된 부분이 핵심으로, 전체 마크다운 파일 순회를 통해, 마크다운 -&gt; html -&gt; json 으로 변환하는 과정을 담고 있는데, 재귀함수를 IIFE 로 구현해서 복잡하기는 하지만 차근차근 구문을 보면 이해가 될 것이다.</p><p><code>src_md</code> 파일은 마크다운 소스의 경로 위치를 담고 있는 string 으로, 이와 함께 <code>{{ content }}</code> 템플릿 지시자가 받을 내용과, 해당 마크다운의 인터넷 주소에 해당하는 <code>pathname</code> 을 인수로 넘긴다.</p><p>함수 내부에서 <code>matter</code> 오브젝트가 우선 프론트매터와 실제 콘텐츠를 분리하고, 콘텐츠가 마크다운이었다면 <code>md</code> 오프젝트가, 아니라면 <code>engine</code> 오브젝트가 파싱한다. 그리고 프론트매터에 <code>layout</code> 이 있다면 이를 다시 <code>content</code> 에 담아서 재귀호출을 하고, 없다면 최종 리턴하도록 했다.</p><p>전체 마크다운을 순회한 뒤, <code>pageinfo.json</code> 파일이 새롭게 만들어 지면, 이를 가지고 전체 네이게이션 페이지에 해당하는 json 을 생성하고, 다음으로 더 이상 필요가 없는 json 을 삭제하도록 한뒤, 새로운 메타데이터들을 로컬에 저장하는 식으로 작동하도록 했다.</p><p>참고로, 각 포스팅에 해당하는 레이아웃인 <code>page.html</code> 과 네이게이션 페이지에 해당하는 레이아웃인 <code>nav.html</code> 은 html 코드만 더 추가된 형태이므로 굳이 여기에서 자세히 언급하지는 않겠다.</p><h2>웹페이지 빌드 스크립트</h2><p>위에서는 포스팅과 네비게이션을 빌드한 스크립트였고, 이제 웹페이지 껍데기를 빌드하는 스크립트를 작성한다.</p><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">build_layout</span>(<span class=\"hljs-params\"></span>) {</div><div class=\"codeline\">  <span class=\"hljs-keyword\">let</span> r = matter.<span class=\"hljs-title function_\">read</span>(<span class=\"hljs-string\">&#x27;./_layouts/base.html&#x27;</span>, {</div><div class=\"codeline\">    <span class=\"hljs-attr\">engines</span>: {<span class=\"hljs-attr\">yaml</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> yaml.<span class=\"hljs-title function_\">safeLoad</span>(s, { <span class=\"hljs-attr\">schema</span>: yaml.<span class=\"hljs-property\">JSON_SCHEMA</span> })}</div><div class=\"codeline\">  })</div><div class=\"codeline\">  <span class=\"hljs-keyword\">let</span> content = engine.<span class=\"hljs-title function_\">parseAndRenderSync</span>(r.<span class=\"hljs-property\">content</span>, { ...r.<span class=\"hljs-property\">data</span> })</div><div class=\"codeline\">  content = <span class=\"hljs-title function_\">minify</span>(content, { <span class=\"hljs-attr\">collapseWhitespace</span>: <span class=\"hljs-literal\">true</span> })</div><div class=\"codeline\">  fs.<span class=\"hljs-title function_\">outputFileSync</span>(<span class=\"hljs-string\">&#x27;./docs/index.html&#x27;</span>, content)</div><div class=\"codeline\">  fs.<span class=\"hljs-title function_\">copyFileSync</span>(<span class=\"hljs-string\">&#x27;./docs/index.html&#x27;</span>, <span class=\"hljs-string\">&#x27;./docs/404.html&#x27;</span>)</div><div class=\"codeline\">}</div></code></pre><p>제일 아래 구문을 보면, 앞선 포스팅에서 언급했던 대로 <code>index.html</code> 를 생성한 다음, 이를 <code>404.html</code> 으로 복사하는 구문이 있음을 눈여겨 볼 수 있다.</p><h2>css 빌드 및 static 요소 처리 스크립트</h2><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">build_asset</span>(<span class=\"hljs-params\"></span>) {</div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> src_dir = <span class=\"hljs-string\">&#x27;./_assets&#x27;</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> tar_dir = <span class=\"hljs-string\">&#x27;./docs&#x27;</span></div><div class=\"codeline\"> </div><div class=\"codeline\">  fs.<span class=\"hljs-title function_\">ensureDirSync</span>(src_dir)</div><div class=\"codeline\">  fs.<span class=\"hljs-title function_\">copySync</span>(src_dir, tar_dir, {</div><div class=\"codeline\">    <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to</span>) =&gt;</span> {</div><div class=\"codeline\">      <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">from</span>.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">&#x27;/main.css&#x27;</span>)</div><div class=\"codeline\">    }</div><div class=\"codeline\">  })</div><div class=\"codeline\"> </div><div class=\"codeline\">  fs.<span class=\"hljs-title function_\">ensureFileSync</span>(src_dir + <span class=\"hljs-string\">&#x27;/main.css&#x27;</span>)</div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> css_o = fs.<span class=\"hljs-title function_\">readFileSync</span>(src_dir + <span class=\"hljs-string\">&#x27;/main.css&#x27;</span>)</div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> postcss_opt = {<span class=\"hljs-attr\">from</span>: src_dir + <span class=\"hljs-string\">&#x27;/main.css&#x27;</span>, <span class=\"hljs-attr\">to</span>: tar_dir + <span class=\"hljs-string\">&#x27;/main.css&#x27;</span>}</div><div class=\"codeline\"> </div><div class=\"codeline\">  <span class=\"hljs-keyword\">const</span> r = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">postcss</span>([postcss_nested, unocss, cssnano]).<span class=\"hljs-title function_\">process</span>(css_o, postcss_opt)</div><div class=\"codeline\">  fs.<span class=\"hljs-title function_\">outputFileSync</span>(tar_dir + <span class=\"hljs-string\">&#x27;/main.css&#x27;</span>, r.<span class=\"hljs-property\">css</span>)</div><div class=\"codeline\">}</div></code></pre><p><a href=\"https://postcss.org/\">PostCSS</a> 를 통해서, nested css 구문을 정리하고, <a href=\"https://unocss.dev/\">UnoCSS</a> 모듈로 Utility-First css 구문을 파싱하고, 압축하여 <code>main.css</code> 를 생성하도록 했다.</p><p>그리고, 나머지 static 파일들을 복사하는 구문도 포함했다.</p><h2>빌드 선택 스크립트</h2><p>마지막에 아래와 같은 스크립트를 추가한다.</p><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-keyword\">switch</span> (process.<span class=\"hljs-property\">argv</span>[<span class=\"hljs-number\">2</span>]) {</div><div class=\"codeline\">  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;md&#x27;</span>:</div><div class=\"codeline\">    <span class=\"hljs-title function_\">build_md</span>()</div><div class=\"codeline\">    <span class=\"hljs-keyword\">break</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;asset&#x27;</span>:</div><div class=\"codeline\">    <span class=\"hljs-title function_\">build_asset</span>()</div><div class=\"codeline\">    <span class=\"hljs-keyword\">break</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;layout&#x27;</span>:</div><div class=\"codeline\">    <span class=\"hljs-title function_\">build_layout</span>()</div><div class=\"codeline\">    <span class=\"hljs-keyword\">break</span></div><div class=\"codeline\">  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;full&#x27;</span>:</div><div class=\"codeline\">    fs.<span class=\"hljs-title function_\">outputJSONSync</span>(<span class=\"hljs-string\">&#x27;./_pages/pageinfo.json&#x27;</span>, [])</div><div class=\"codeline\">    fs.<span class=\"hljs-title function_\">removeSync</span>(<span class=\"hljs-string\">&#x27;./docs&#x27;</span>)</div><div class=\"codeline\">    <span class=\"hljs-title function_\">build_md</span>()</div><div class=\"codeline\">    <span class=\"hljs-title function_\">build_layout</span>()</div><div class=\"codeline\">    <span class=\"hljs-title function_\">build_asset</span>()</div><div class=\"codeline\">    <span class=\"hljs-keyword\">break</span></div><div class=\"codeline\">  <span class=\"hljs-attr\">default</span>:</div><div class=\"codeline\">    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;you gave wrong command&#x27;</span>)</div><div class=\"codeline\">}</div></code></pre><p>간단히 보자면, <code>node build.js [command]</code> 와 같은 형태로 선택하며 빌드할 수 있도록 꾸며봤다.</p><p>다음으로 진행할 것은 <a href=\"https://docs.github.com/ko/actions\">Github Actions</a> 를 사용하여 빌드를 자동화 할 것인데, 자동화에는 <code>bulid_md</code> 함수만 작동하도록 할 생각이다. 웹페이지 레이아웃이나, css, static 리소스가 바뀔 일은 거의 없기 때문이기에, 따라서 빌드 정도를 선택할 수 있도록 switch 구문으로 구분하였다.</p><p>참고로 <code>node build.js full</code> 을 터미널에 입력하면 전체 빌드가 다시 되는데, 마크다운 메타데이터가 담겨있는 <code>pageinfo.json</code> 파일을 초기화하고, 빌드 결과가 담긴 <code>/docs</code> 폴더를 삭제하여 모든 내용들이 처음부터 다시 빌드되도록 했다.</p></div></article>"}
