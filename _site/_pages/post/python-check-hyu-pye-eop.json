{"pathname":"/post/python-check-hyu-pye-eop","cat":"/dev","title":"Python 으로 국세청 휴폐업 조회 API 사용","description":"Python 코드로 국세청에서 제공하는 사업자등록번호 기반 휴폐업 조회 시스템 API 사용","updated":"2023-08-15","layout":"page","content":"<h2>국세청 휴폐업 조회</h2><p>사업자번호로 실제 사업자가 계속사업중인지, 휴업이나 폐업을 했는지 알아낼 수 있다. <a href=\"https://www.data.go.kr/data/15081808/openapi.do\">국세청_사업자등록정보 진위확인 및 상태조회 서비스</a>에서 제공하는 API 서비스를 사용하면 최대 100 개씩 조회가 가능하다.</p><h2>공공데이터 포털 인증키 발급</h2><p>API 서비스를 사용하려면 공공데이터 포털에 가입하고 API 사용 신청을 해야 한다. <a href=\"https://www.data.go.kr/ugs/selectPublicDataUseGuideView.do\">공공데이터</a> 포털에서 API 사용 신청 방법을 확인할 수 있다.</p><h2>Python 코딩</h2><p>회사 업무 상 필요할 때가 있어서, 다량의 사업자번호를 주면 100 개씩 끊어서 계속 조회하고, 결과값을 CSV 파일로 저장해주는 코드를 구글링 통해 짜깁기 해봤다.</p><pre><code class=\"language-python\"><div class=\"codeline\"><span class=\"hljs-comment\"># python</span></div><div class=\"codeline\"> </div><div class=\"codeline\">no = [</div><div class=\"codeline\">    <span class=\"hljs-string\">&quot;1111111111&quot;</span>, <span class=\"hljs-string\">&quot;1111111112&quot;</span>    <span class=\"hljs-comment\"># 상태 조회를 원하는 사업자번호를 리스트 형태로 삽입</span></div><div class=\"codeline ]\"> </div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> requests</div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</div><div class=\"codeline\"><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep</div><div class=\"codeline\"><span class=\"hljs-keyword\">import</span> os</div><div class=\"codeline\"> </div><div class=\"codeline\">auth = <span class=\"hljs-string\">&#x27;XXXX&#x27;</span>    <span class=\"hljs-comment\"># XXXX 에 공공데이터 포털에서 API 사용 신청 후 발급받은 인증키 삽입</span></div><div class=\"codeline\">headers = {</div><div class=\"codeline\">  <span class=\"hljs-string\">&#x27;accept&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>,</div><div class=\"codeline\">  <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>,</div><div class=\"codeline\">  <span class=\"hljs-string\">&#x27;Authorization&#x27;</span>: auth,</div><div class=\"codeline\">}</div><div class=\"codeline\">params = ((<span class=\"hljs-string\">&#x27;serviceKey&#x27;</span>, auth),)</div><div class=\"codeline\"> </div><div class=\"codeline\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(no)//<span class=\"hljs-number\">100</span>+<span class=\"hljs-number\">1</span>):</div><div class=\"codeline\">  sleep(<span class=\"hljs-number\">1</span>)</div><div class=\"codeline\">  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;진행단계: {}&#x27;</span>.<span class=\"hljs-built_in\">format</span>(i))</div><div class=\"codeline\">  data = <span class=\"hljs-string\">&#x27;{{ &quot;b_no&quot;: [{}] }}&#x27;</span>.<span class=\"hljs-built_in\">format</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>.join(<span class=\"hljs-string\">&#x27;&quot;{}&quot;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(<span class=\"hljs-built_in\">str</span>(x)) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> no[i*<span class=\"hljs-number\">100</span>:(i+<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">100</span>]))</div><div class=\"codeline\">  res = requests.post(<span class=\"hljs-string\">&#x27;https://api.odcloud.kr/api/nts-businessman/v1/status&#x27;</span>, headers=headers, params=params, data=data)</div><div class=\"codeline\"> </div><div class=\"codeline\">  <span class=\"hljs-built_in\">dict</span> = pd.read_json(res.text)</div><div class=\"codeline\">  df = pd.json_normalize(<span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-string\">&#x27;data&#x27;</span>]) </div><div class=\"codeline\">  index, mode, encoding, header = [<span class=\"hljs-literal\">False</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;utf-8-sig&#x27;</span>, <span class=\"hljs-literal\">False</span>] <span class=\"hljs-keyword\">if</span> os.path.exists(<span class=\"hljs-string\">&#x27;output.csv&#x27;</span>) <span class=\"hljs-keyword\">else</span> [<span class=\"hljs-literal\">False</span>, <span class=\"hljs-string\">&#x27;w&#x27;</span>, <span class=\"hljs-string\">&#x27;utf-8-sig&#x27;</span>, <span class=\"hljs-literal\">True</span>]</div><div class=\"codeline\">  df.to_csv(<span class=\"hljs-string\">&#x27;output.csv&#x27;</span>, index=index, mode=mode, encoding=encoding, header=header)</div></code></pre><p>Python 은 물론 <a href=\"https://requests.readthedocs.io/en/latest/\">requests</a> 와 <a href=\"https://pandas.pydata.org/\">pandas</a> 모듈도 사전에 설치되어 있어야 한다.</p><p><code>no</code> 리스트에 사업자번호를 문자열 형식으로 담은 다음 실행하면, 1 회 반복마다 100 개씩 API 로 조회 요청을 보내게 되며, 그 결과는 pandas 통해 <code>output.csv</code> 파일에 100 개씩 누적해서 저장이 된다.</p><p>중간에 모종의 이유로 실행이 멈춘다면 <code>output.csv</code> 내용을 확인하고, 이후부터 다시 돌리면 된다.</p>"}
