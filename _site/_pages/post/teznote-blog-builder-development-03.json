{"pathname":"/post/teznote-blog-builder-development-03","cat":"/dev","title":"Tez'Note 블로그 빌더 개발노트 03 - markdown-it, highlight.js 커스터마이징","description":"코드 하이라이터에 의사코드 하이라이팅, 라인별 하이라이팅 기능 추가 커스터마이징","updated":"2023-12-02","content":"<article><h1 id=\"page-title\">Tez'Note 블로그 빌더 개발노트 03 - markdown-it, highlight.js 커스터마이징</h1><div><div id=\"page-description\">코드 하이라이터에 의사코드 하이라이팅, 라인별 하이라이팅 기능 추가 커스터마이징</div><div id=\"page-updated\">Last updated: 2023-12-02</div></div><div id=\"page-main\"><h2>커스터마이징</h2><p>3rd-party 모듈을 사용하면 편하다. 그리고 안전하다. 하지만 이런것도 있었으면, 이랬으면, 하는 생각이 드는 건 어쩔 수 없나보다.</p><p>마크다운 파싱에 <a href=\"https://github.com/markdown-it/markdown-it#readme\">markdown-it</a> 과 <a href=\"https://highlightjs.org/\">highlight.js</a> 를 사용하는데, 의사코드 (Pseudo Code) 를 하이라이팅하고 (highlight.js 가 지원하지 않는 언어 하이라이팅 규칙 생성), 라인별로도 하이라이팅할 수 있는 (일부 라인 강조 규칙 생성) 기능을 추가해보기로 했다.</p><h2>의사코드 하이라이팅 규칙 생성</h2><p>앞서서 생성한 <code>build.js</code> 를 열어서 아래 내용을 이어서 추가했다.</p><pre><code class=\"language-js\"><div class=\"codeline\">hljs.<span class=\"hljs-title function_\">registerLanguage</span>(<span class=\"hljs-string\">&quot;pseudo&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">hljs</span>) {</div><div class=\"codeline\">  <span class=\"hljs-keyword\">return</span> {</div><div class=\"codeline\">    <span class=\"hljs-attr\">aliases</span>: [<span class=\"hljs-string\">&#x27;ps&#x27;</span>],</div><div class=\"codeline\">    <span class=\"hljs-attr\">contains</span>: [</div><div class=\"codeline\">      {</div><div class=\"codeline\">        <span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;comment&#x27;</span>,</div><div class=\"codeline\">        <span class=\"hljs-attr\">begin</span>: <span class=\"hljs-regexp\">/#/</span>,</div><div class=\"codeline\">        <span class=\"hljs-attr\">end</span>: <span class=\"hljs-regexp\">/\\s\\s|\\n|$/</span>,</div><div class=\"codeline\">      },</div><div class=\"codeline\">      {</div><div class=\"codeline\">        <span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;strong&#x27;</span>,</div><div class=\"codeline\">        <span class=\"hljs-attr\">begin</span>: <span class=\"hljs-regexp\">/\\b[A-Z][A-Z0-9]*\\b/</span>,</div><div class=\"codeline\">      },</div><div class=\"codeline\">      {</div><div class=\"codeline\">        <span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;number&#x27;</span>,</div><div class=\"codeline\">        <span class=\"hljs-attr\">begin</span>: <span class=\"hljs-regexp\">/\\b[0-9]+\\b/</span>,</div><div class=\"codeline\">      },</div><div class=\"codeline\">      {</div><div class=\"codeline\">        <span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;leadline&#x27;</span>,</div><div class=\"codeline\">        <span class=\"hljs-attr\">begin</span>: <span class=\"hljs-regexp\">/[─│┌┐┘└├┬┤┴┼▲▶▼◀↑→↓←]+/</span>,</div><div class=\"codeline\">      },</div><div class=\"codeline\">    ],</div><div class=\"codeline\">  }</div><div class=\"codeline\">})</div></code></pre><p><code>pseudo</code> 라는 임의의 언어를 생성하는 구문이다. <a href=\"https://highlightjs.readthedocs.io/en/latest/language-guide.html\">highlight.js 도움말</a>과 다른 언어 팩이 어떻게 만들어졌는지를 참고하여 삽질끝에 적당히 만들 수 있었다.</p><p>새로운 class 도 커스터마이징을 할 수 있다. 위 코드에서 <code>comment</code>, <code>strong</code>, <code>number</code> 는 미리 정의가 되어있는 class 로 규칙만 만들면 되지만, 제일 아래에 있는 <code>leadline</code> class 는 임의로 생성한 명칭으로, 별도로 css 파일에 <code>.hljs-leadline</code> 속성도 정의해야 한다.</p><p>마크다운에 아래처럼 적용하면 <code>pseudo</code> 언어로 하이라이팅 된다.</p><pre><code class=\"language-markdown\"><div class=\"codeline\"><span class=\"hljs-code\">```pseudo</span></div><div class=\"codeline\">blah... blah...</div><div class=\"codeline\">blah...</div><div class=\"codeline\">```</div></code></pre><p>아래는 실제로 사용한 예시다.</p><pre><code class=\"language-pseudo\"><div class=\"codeline\"><span class=\"hljs-comment\"># linked list 구조</span></div><div class=\"codeline\"> </div><div class=\"codeline\">head ─────→ <span class=\"hljs-strong\">NODE</span>       ┌───→ <span class=\"hljs-strong\">NODE</span></div><div class=\"codeline\">            ├ val: <span class=\"hljs-number\">1</span>   │     ├ val: <span class=\"hljs-number\">2</span></div><div class=\"codeline\">            └ next ────┘     └ next ─────→ null</div></code></pre><h2>라인별 하이라이팅 기능 생성</h2><p><code>build.js</code> 파일에 아래 내용을 이어서 작성했다.</p><pre><code class=\"language-js\"><div class=\"codeline\"><span class=\"hljs-keyword\">const</span> md = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">markdownIt</span>({</div><div class=\"codeline\">  <span class=\"hljs-attr\">html</span>: <span class=\"hljs-literal\">true</span>,</div><div class=\"codeline\">  <span class=\"hljs-attr\">xhtmlOut</span>: <span class=\"hljs-literal\">true</span>,</div><div class=\"codeline\">  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, lang</span>) {</div><div class=\"codeline\">    <span class=\"hljs-keyword\">let</span> lines_o = str.<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/^[\\s\\S]*?$/gm</span>)</div><div class=\"codeline\"> </div><div class=\"codeline\">    <span class=\"hljs-keyword\">let</span> str_modified = <span class=\"hljs-string\">&#x27;&#x27;</span></div><div class=\"codeline\">    <span class=\"hljs-keyword\">let</span> tar_line = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()</div><div class=\"codeline\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [i, x] <span class=\"hljs-keyword\">of</span> lines_o.<span class=\"hljs-title function_\">entries</span>()) {</div><div class=\"codeline\">      <span class=\"hljs-keyword\">let</span> prefix = x[<span class=\"hljs-number\">0</span>]</div><div class=\"codeline\">      <span class=\"hljs-keyword\">if</span> (prefix === <span class=\"hljs-string\">&#x27;+&#x27;</span> || prefix === <span class=\"hljs-string\">&#x27;-&#x27;</span> || prefix === <span class=\"hljs-string\">&#x27;:&#x27;</span>) {</div><div class=\"codeline\">        tar_line.<span class=\"hljs-title function_\">set</span>(i, prefix)</div><div class=\"codeline\">        x = x.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>)</div><div class=\"codeline\">      }</div><div class=\"codeline\">      str_modified += (x ? x : <span class=\"hljs-string\">&#x27; &#x27;</span>) + <span class=\"hljs-string\">&#x27;\\n&#x27;</span></div><div class=\"codeline\">    }</div><div class=\"codeline\"> </div><div class=\"codeline\">    <span class=\"hljs-keyword\">const</span> _lang = lang &amp;&amp; hljs.<span class=\"hljs-title function_\">getLanguage</span>(lang) ? lang : <span class=\"hljs-string\">&#x27;plaintext&#x27;</span></div><div class=\"codeline\">    <span class=\"hljs-keyword\">const</span> lines = hljs.<span class=\"hljs-title function_\">highlight</span>(str_modified, { <span class=\"hljs-attr\">language</span>: _lang }).<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/^[\\s\\S]*?$/gm</span>)</div><div class=\"codeline\"> </div><div class=\"codeline\">    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-string\">&#x27;&#x27;</span></div><div class=\"codeline\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [i, x] <span class=\"hljs-keyword\">of</span> lines.<span class=\"hljs-title function_\">entries</span>()) {</div><div class=\"codeline\">      x = <span class=\"hljs-string\">`&lt;div class=&quot;line <span class=\"hljs-subst\">${tar_line.get(i) || <span class=\"hljs-string\">&#x27;&#x27;</span>}</span>&quot;&gt;<span class=\"hljs-subst\">${x}</span>&lt;/div&gt;`</span></div><div class=\"codeline\">      res += x</div><div class=\"codeline\">    }</div><div class=\"codeline\">    </div><div class=\"codeline\">    <span class=\"hljs-keyword\">return</span> res</div><div class=\"codeline\">  },</div><div class=\"codeline\">})</div></code></pre><p><a href=\"https://github.com/markdown-it/markdown-it#init-with-presets-and-options\">markdown-it</a> 홈페이지를 보면, 실제 마크다운 파싱을 하는 <code>md</code> 변수를 생성할 때의 각종 초기 옵션 설정 도움말을 볼 수 있다.</p><p><code>higlight</code> 부분이 핵심인데, 마크다운 파싱하다가 <code>``` python</code> 과 같은 펜스구문을 만나면, 펜스 안의 내용 (콘텐츠) 과 사용언어 (여기서는 python) 각각을 <code>highlight</code> 로 명명한 함수인 <code>function (str, lang)</code> 에 대입하여 처리토록 되어있다.</p><p>코드를 대략 요약하면...</p><p>정규식으로 <code>str</code> 각 라인을 배열로 잘라내고, 배열을 순회하면서 만일 각 라인의 제일 앞이 <code>+</code>, <code>-</code>, <code>:</code> 라면 이를 잘라내고 몇번째 라인이었는지 기억해둔다.</p><p>그리고 <code>hljs</code> 오브젝트로 하이라이팅 구문을 생성하고, 이를 다시 각 라인을 배열로 잘라낸다. 라인을 순회하면서, 각 라인을 <code>&lt;div&gt;</code> 태그로 감싸고, <code>line</code> 이라는 class 이름과 앞서서 몇번째인지 기억해뒀던 <code>+</code>, <code>-</code>, <code>:</code> 에 해당하는 라인 차례가 되면 이것도 class 이름으로 삽입토록 했다.</p><p>나중에 css 파일에 <code>.line.\\: {background-color: #eee;}</code> 등으로 속성을 지정하면 된다. 아래는 이를 사용해 본 예시다.</p><pre><code class=\"language-python\"><div class=\"codeline\"><span class=\"hljs-comment\"># leetcode 1 번 문제 python brute force 풀이</span></div><div class=\"codeline\"> </div><div class=\"codeline\">&gt;<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">twoSum</span>(<span class=\"hljs-params\">self, nums: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:</div><div class=\"codeline -\">  <span class=\"hljs-keyword\">for</span> i, x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums):</div><div class=\"codeline +\">  <span class=\"hljs-keyword\">for</span> i, x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums[:-<span class=\"hljs-number\">1</span>]):</div><div class=\"codeline -\">    <span class=\"hljs-keyword\">for</span> j, y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums):</div><div class=\"codeline +\">    <span class=\"hljs-keyword\">for</span> j, y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums[i+<span class=\"hljs-number\">1</span>:], i+<span class=\"hljs-number\">1</span>):</div><div class=\"codeline\">      <span class=\"hljs-keyword\">if</span> x+y == target:</div><div class=\"codeline\">        <span class=\"hljs-keyword\">return</span> i, j</div></code></pre></div></article>"}
